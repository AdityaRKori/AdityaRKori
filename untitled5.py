# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LoUVofwxVmxvURHSz09Q0axl4cINdDkJ
"""

# prompt: import pandas as pd

import pandas as pd

# prompt: read csv file

import pandas as pd

df = pd.read_csv('/content/Health_insurance.csv')
df

# prompt: check for duplicate data

duplicate_rows_df = df[df.duplicated()]
print("Number of duplicate rows: ", duplicate_rows_df.shape)
duplicate_rows_df

# prompt: drop the duplicate from file

df.drop_duplicates(inplace=True)
df

# prompt: in age column replace all missing values with its average age

import pandas as pd

df = pd.read_csv('/content/Health_insurance.csv')

# Calculate the average age, excluding missing values
average_age = df['age'].mean()

# Replace missing values in the 'age' column with the average age
df['age'].fillna(average_age, inplace=True)

df

# prompt: for all outliers replace with average value

import pandas as pd
import numpy as np

df = pd.read_csv('/content/Health_insurance.csv')

# Calculate the average age, excluding missing values
average_age = df['age'].mean()

# Replace missing values in the 'age' column with the average age
df['age'].fillna(average_age, inplace=True)


def replace_outliers_with_average(df, column_name):
    # Calculate Q1 and Q3
    Q1 = df[column_name].quantile(0.25)
    Q3 = df[column_name].quantile(0.75)

    # Calculate IQR
    IQR = Q3 - Q1

    # Define outlier boundaries
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR

    # Identify outliers
    outliers = df[(df[column_name] < lower_bound) | (df[column_name] > upper_bound)]

    # Calculate the average of the column, excluding outliers
    average_value = df[(df[column_name] >= lower_bound) & (df[column_name] <= upper_bound)][column_name].mean()

    # Replace outliers with the average
    df.loc[outliers.index, column_name] = average_value
    return df


# Example usage: replace outliers in 'bmi' column with the average
df = replace_outliers_with_average(df, 'bmi')

# Example usage: replace outliers in 'charges' column with the average
df = replace_outliers_with_average(df, 'charges')

df

# prompt: in sex column replace all values as Male or Female

import pandas as pd

df = pd.read_csv('/content/Health_insurance.csv')

# Replace values in the 'sex' column
df['sex'] = df['sex'].replace(['male', 'Male', 'm', 'M'], 'Male')
df['sex'] = df['sex'].replace(['female', 'Female', 'f', 'F'], 'Female')

df

# prompt: in column 'sex' replace all random or null values as Male or Female

import pandas as pd
import numpy as np

df = pd.read_csv('/content/Health_insurance.csv')

# Replace values in the 'sex' column
df['sex'] = df['sex'].replace(['male', 'Male', 'm', 'M'], 'Male')
df['sex'] = df['sex'].replace(['female', 'Female', 'f', 'F'], 'Female')

# Now, replace any remaining invalid values with 'Male' or 'Female'
# You can choose a more sophisticated approach if you have specific criteria
df['sex'] = df['sex'].fillna(method='ffill')  # Replace NaN with previous valid value

# Or replace with the most frequent value
# most_frequent_sex = df['sex'].mode()[0]
# df['sex'] = df['sex'].fillna(most_frequent_sex)

# or use random selection to replace null values
# df['sex'] = df['sex'].fillna(pd.Series(np.random.choice(['Male', 'Female'], size=len(df))))


#check for any other random values
# You may want to check the unique values in 'sex' column after replacement to ensure no unexpected values exists
print(df['sex'].unique())

df

# prompt: check for missing or duplicate values and replace with dummies

import pandas as pd
import numpy as np

df = pd.read_csv('/content/Health_insurance.csv')

# Function to replace missing and duplicate values with dummy values
def replace_missing_duplicates(df):
    # Replace missing values with 'Unknown' or a suitable dummy value
    for col in df.columns:
        if df[col].isnull().any():
            if pd.api.types.is_numeric_dtype(df[col]):
                df[col] = df[col].fillna(df[col].mean())  # Fill numeric columns with mean
            else:
                df[col] = df[col].fillna('Unknown') # Fill other columns with 'Unknown'

    # Identify and handle duplicate rows
    df.drop_duplicates(inplace=True)

    return df

df = replace_missing_duplicates(df)


# Example usage: replace outliers in 'bmi' column with the average
def replace_outliers_with_average(df, column_name):
    # Calculate Q1 and Q3
    Q1 = df[column_name].quantile(0.25)
    Q3 = df[column_name].quantile(0.75)

    # Calculate IQR
    IQR = Q3 - Q1

    # Define outlier boundaries
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR

    # Identify outliers
    outliers = df[(df[column_name] < lower_bound) | (df[column_name] > upper_bound)]

    # Calculate the average of the column, excluding outliers
    average_value = df[(df[column_name] >= lower_bound) & (df[column_name] <= upper_bound)][column_name].mean()

    # Replace outliers with the average
    df.loc[outliers.index, column_name] = average_value
    return df

# Example usage: replace outliers in 'bmi' column with the average
df = replace_outliers_with_average(df, 'bmi')

# Example usage: replace outliers in 'charges' column with the average
df = replace_outliers_with_average(df, 'charges')


#Standardize values in the 'sex' column
df['sex'] = df['sex'].replace(['male', 'Male', 'm', 'M'], 'Male')
df['sex'] = df['sex'].replace(['female', 'Female', 'f', 'F'], 'Female')

#Handle remaining invalid values in the 'sex' column using forward fill
df['sex'] = df['sex'].fillna(method='ffill')

#Check unique values in 'sex' column for unexpected values
print(df['sex'].unique())

df

