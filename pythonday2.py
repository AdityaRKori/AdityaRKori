# -*- coding: utf-8 -*-
"""pythonDay2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dCYtzzsi4ErN4yEET3eCLLeoB9jdIhgi
"""

def fn_add(a,b):
  c = a+b
  return c

  var_sum = fn_add(2,3)

  print("Addition of 2 numbers is:",var_sum)

  fn_add(10,3)

def fn_sub(a,b):
  c = a-b
  return c

  var_sub = fn_sub(a=1,b=2)

  print("Subtraction of 2 numbers is:",var_sub)

  fn_sub(10,3)

def fn_mul(a,b):
  c = a*b
  return c

  var_mul = fn_mul(a=1,b=2)

  print("Multiplication of 2 numbers is:",var_mul)

def fn_div(a,b):
  c = a/b
  return c

  var_div = fn_div(a=1,b=2)

  print("Division of 2 numbers is:",var_div)

def fn_div(a,b):
  c = a//b
  return c

  var_div = fn_div(a=1,b=2)

  print("Division of 2 numbers is:",var_div)

  fn_div(a=2,b=412)

# syntax
# def function_name(parameters):
#  Block of code
#
# function_name(arguments)

def greet(name,age,gender):
  print(f"Hi, Welcome to hospital:{name}")
  print(f"Your age is {age}")
  print(f"Your gender is {gender}")

  greet("patient1",12,"Female")
  greet("patient2",58,"Male")

  # Function with Return Values

  def sub(a,b=10):
        return a-b

  sub_var = sub(2,1)
  sub_var_default = sub(2)

  print("Subtraction of 2 numbers is:",sub_var)
  print("Subtraction of 2 numbers with default is:",sub_var_default)

# Funtion with if condition

def classify_age_group(age):
  if age < 18:
    return "Minor"
  elif age >= 18 and age < 65:
    return "Adult"
  else:
    return "Senior"

    age=100
    age_group = classify_age_group(age)
    print(f"The age group for age {age} is {age_group}.")

# Funtion with if condition

def classify_age_group(age):
  if age < 18:
      return "Child"
  else:
      return "Adult"

      age=100
      var_patient1 = classify_age_group(age)
      print(f'The age group for age {age} is {var_patient1}')

      # var_patient2 = classify_age_group(17)
      #print('patient with age 18 is:',var_patient2)

def add_three(list_age):
  list_age_three = []
  for i in list_age:
    list_age_three.append(i+3)
  return list_age_three

  list_sample = [1,2,3,4,5]
  list_sample = add_three(list_sample)
  print(list_sample)

def add_three_and_classify(list_age):
  list_age_three = []
  odd_numbers = []
  even_numbers = []
  for i in list_age:
    list_age_three.append(i + 0)
  for num in list_age_three:
    if num % 2 == 0:
      even_numbers.append(num)
    else:
      odd_numbers.append(num)

  return odd_numbers, even_numbers

list_sample = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
odd_nums, even_nums = add_three_and_classify(list_sample)

print("Odd numbers:", odd_nums)
print("Even numbers:", even_nums)

def assess_lifestyle_habits():
  """Assesses lifestyle habits and provides feedback."""

  meals_per_day = int(input("How many meals do you eat per day on average? "))

  walking_distance_per_week = float(input("How many miles do you walk per week on average? "))

  if meals_per_day > 3 and walking_distance_per_week > 150:
    lifestyle_assessment = "Good"
    feedback = "Your lifestyle habits are good! Keep up the great work!"
  elif meals_per_day == 3 and walking_distance_per_week == 150:
    lifestyle_assessment = "Average"
    feedback = "Your lifestyle habits are average. Consider improving your diet and exercise routine for better health."
  else:
    lifestyle_assessment = "Bad"
    feedback = "Your lifestyle habits need improvement. Aim for at least 3 meals a day and more than 150 miles of walking per week."
    if meals_per_day >= 3 and walking_distance_per_week <= 150:
      lifestyle_assessment = "below average"
      feedback = "Your lifestyle habits are below average. Consider improving your exercise routine for better health."
  if meals_per_day <= 3 and walking_distance_per_week >= 150:
        lifestyle_assessment = "below average"
        feedback = "Your lifestyle habits are below average. Consider improving your diet for better health."


  print(f"Your lifestyle assessment: {lifestyle_assessment}")
  print(feedback)

assess_lifestyle_habits()

# defining the class
class Car:
  def __init__(self, brand, color):
    self.brand = brand #Attribute
    self.color = color #Attribute

  def start(self): #Method
    print(f"The {self.color} {self.brand} car has started.")

  def stop(self): #Method
    print(f"The {self.color} {self.brand} is stopping.")

# creating objects
car1 = Car("Toyota","Red")
car2 = Car("Honda","Blue")

# Accessing attributes and methods
print(car1.brand) # Output: Toyota
car1.start() # Output: The Red Toyota car has started.

print(car2.color) # Output: Blue
car2.start() # Output: The Blue Honda car has started.

car1.start()
car2.start()

car1.stop()
car2.stop()

import matplotlib.pyplot as plt

# Define the Car class
class Car:
    def __init__(self, brand, color, cost):
        self.brand = brand
        self.color = color
        self.cost = cost

    def start(self):
        print(f"The {self.color} {self.brand} car has started.")

# Create instances of the Car class
car1 = Car("Toyota", "Red", 2000)
car2 = Car("Honda", "Blue", 30000)

# Accessing attributes and methods
print(car1.brand)           # Output: Toyota
car1.start()                # Output: The Red Toyota car has started.
print(car2.color)           # Output: Blue
car2.start()                # Output: The Blue Honda car has started.
print(car1.cost)            # Output: 2000
print(car2.cost)            # Output: 30000

# Data for pie chart
brands = [car1.brand, car2.brand]
costs = [car1.cost, car2.cost]

# Create pie chart
plt.figure(figsize=(6, 6))
plt.pie(costs, labels=brands, autopct='%1.1f%%', startangle=140, colors=['red', 'blue'])
plt.title("Cost Distribution of Cars")
plt.show()

import numpy as np

np_sugar = np.array([100, 200, 150, 110, 200, 80, 150])

print("Number of months with diabetic levels :", len(np_sugar[np_sugar >= 126]))
print("Number of months with prediabetic levels :", len(np_sugar[(np_sugar >= 100) & (np_sugar <= 125)]))
print("Number of months with normal levels :", len(np_sugar[np_sugar < 100]))
print("Average blood sugar level :", np_sugar.mean())

import matplotlib.pyplot as plt

# Define the function to categorize fasting blood sugar levels
def categorize_blood_sugar(levels):
    normal = 0
    prediabetes = 0
    diabetes = 0

    for level in levels:
        if level <= 99:
            normal += 1
        elif 100 <= level <= 125:
            prediabetes += 1
        else:
            diabetes += 1

    return normal, prediabetes, diabetes

# Input: Fasting blood sugar levels for each month
blood_sugar_levels = [85, 90, 102, 130, 120, 95, 99, 100, 110, 126, 140, 80]

# Categorize the blood sugar levels
normal_count, prediabetes_count, diabetes_count = categorize_blood_sugar(blood_sugar_levels)

# Output the results
print(f"Normal Range Count: {normal_count}")
print(f"Pre-Diabetes Range Count: {prediabetes_count}")
print(f"Diabetes Range Count: {diabetes_count}")

# Data for the pie chart
labels = ['Normal', 'Pre-Diabetes', 'Diabetes']
counts = [normal_count, prediabetes_count, diabetes_count]
colors = ['green', 'orange', 'red']

# Create the pie chart
plt.figure(figsize=(6, 6))
plt.pie(counts, labels=labels, autopct='%1.1f%%', startangle=140, colors=colors)
plt.title("Blood Sugar Level Distribution")
plt.show()

np_arr = np.array([100,95,98,112,126,147,155,140,120,110,96,162])
np_asc = np.sort(np_arr)
np_desc = np.sort(np_arr)[::-100]
print("The sorted array in ascending order is:",np_asc)
print("The sorted array in descending order is:",np_desc)

np_arr = np.array([100, 120, 95, 130, 110, 105, 125, 135, 98, 115, 122, 108])
print("Initial array is:",np_arr)

np_arr1 = np_arr[np_arr<99]
print("Array Elements less than 99 are:",np_arr1)

np_arr2 = np_arr[np_arr>126]
print("Array Elements greater than 126 are:",np_arr2)

np_arr3 = np_arr[(np_arr>99) | (np_arr<126)]
print("Array Elements greater than 99 and less than 126 are:",np_arr3)

def analyze_blood_sugar(blood_sugar_levels):
    # Initialize counters
    normal_count = 0
    prediabetes_count = 0
    diabetes_count = 0

    # Analyze each month's blood sugar level

    for level in blood_sugar_levels:
        if level <= 99:
            normal_count += 1
        elif 100 <= level <= 125:
            prediabetes_count += 1
        elif level >= 126:
            diabetes_count += 1

    return normal_count, prediabetes_count, diabetes_count

# Input: List of fasting blood sugar levels for each month
blood_sugar_levels = [95, 110, 125, 130, 99, 101, 127, 85, 140, 98, 120, 102]

# Get results
normal_count, prediabetes_count, diabetes_count = analyze_blood_sugar(blood_sugar_levels)

# Print the results
print(f"Normal range months: {normal_count}")
print(f"Pre-diabetes range months: {prediabetes_count}")
print(f"Diabetes range months: {diabetes_count}")

class calculator:
  def __init__(self, brand, cost, color):
    self.brand = brand
    self.cost = cost
    self.color = color

  def start(self):
    print(f"The {self.brand} watch costs {self.cost} and the color is {self.color} and do the functions like add,sub,mul,divide")

  def add(self,a,b):
      return a+b

  def sub(self,a,b):
      return a-b

  def mul(self,a,b):
      return a*b

  def div(self,a,b):
      return a/b



calculator1 = calculator("samsung",10000,"black")
calculator2 = calculator("apple",20000,"white")
a = 3
b = 5

addition_result = calculator1.add(a,b)
subtraction_result = calculator1.sub(a,b)
multiplication_result = calculator1.mul(a,b)

print("Addition:", addition_result)
print("Subtraction:", subtraction_result)
print("Multiplication:", multiplication_result)

print(calculator1.brand)
calculator1.start()
print(calculator2.cost)
calculator2.start()