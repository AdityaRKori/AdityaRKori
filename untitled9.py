# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kc8wVDdJoJUo7MbAanEBQwBt5eSy4PUW
"""

import pandas as pd

# Assuming the uploaded file is named 'data.csv'
try:
  df = pd.read_csv('/content/healthcare_regression_dataset.csv')
  print(df)
except FileNotFoundError:
  print("Error: 'data.csv' not found. Please upload the file.")
except pd.errors.EmptyDataError:
  print("Error: 'data.csv' is empty.")
except pd.errors.ParserError:
  print("Error: Unable to parse 'data.csv'. Check the file format.")

# prompt: remove outliers iqr from all columns

import pandas as pd

def remove_outliers_iqr(df):
    for col in df.select_dtypes(include=['number']).columns:  # Apply only to numeric columns
        Q1 = df[col].quantile(0.25)
        Q3 = df[col].quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR
        df = df[(df[col] >= lower_bound) & (df[col] <= upper_bound)]
    return df

# Assuming the uploaded file is named 'data.csv'
try:
  df = pd.read_csv('/content/healthcare_regression_dataset.csv')
  df = remove_outliers_iqr(df)
  print(df)
except FileNotFoundError:
  print("Error: 'healthcare_regression_dataset.csv' not found. Please upload the file.")
except pd.errors.EmptyDataError:
  print("Error: 'healthcare_regression_dataset.csv' is empty.")
except pd.errors.ParserError:
  print("Error: Unable to parse 'healthcare_regression_dataset.csv'. Check the file format.")

import pandas as pd
import numpy as np

numeric_cols=df.select_dtypes(include=np.number).columns
for col in numeric_cols:
  df=remove_outliers(df,col)

df.isnull().sum()

category_cols=df.select_dtypes(include='object').columns
for col in category_cols:
  print(df[col].unique())

# Renaming columns
df = df.rename(columns={'Patient ID': 'Patient_ID', 'Type of Surgery': 'Type_of_Surgery', 'Length of Surgery': 'Length_of_Surgery', 'Blood Pressure Systolic': 'Blood_Pressure_Systolic',
                        'Blood Pressure Diastolic': 'Blood_Pressure_Diastolic', 'Hemoglobin Level': 'Hemoglobin_Level', 'Smoking Status': 'Smoking_Status',
                        'Recovery Time' : 'Recovery_Time' })

df = df[df['Age'] != 'a']
df['Age'] = pd.to_numeric(df['Age'], errors='coerce')
df.head(10)

df['Gender'].fillna(df['Gender'].mode()[0], inplace = True)
df['Gender'] = df['Gender'].replace({'male': 'Male','f': 'Female'})

df['Type_of_Surgery'].fillna(df['Type_of_Surgery'].mode()[0], inplace = True)
df['Type_of_Surgery'] = df['Type_of_Surgery'].replace({'Uro': 'Urologic','Gastro': 'Gastrointestinal'})

for i in df.select_dtypes(include='object').columns:
 df[i].fillna(df[i].mode()[0], inplace = True)

for i in df.select_dtypes(include = np.number).columns[:-1]:
 df[i] = df[i].fillna(df[i].mean())

df.head()

df = pd.get_dummies(df, columns=['Gender', 'Type_of_Surgery', 'Smoking_Status'])

df.head()

#normalize numerial columns
min_max_values = {}
for i in df.select_dtypes(include = np.number).columns[:-1]:
    min_val = df[i].min()
    max_val = df[i].max()
    df[i] = (df[i] - min_val) / (max_val - min_val)
    min_max_values[i] = (min_val, max_val)

min_max_values

import json
with open('min_max_values.json', 'w') as json_file:
    json.dump(min_max_values, json_file)

df.head()

df.corr()

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(12,10))
Correlation_matrix = df.corr()
sns.heatmap(Correlation_matrix, annot=True, cmap='coolwarm',fmt='.2f')
plt.title('Correlation Matrix')
plt.show()

x=df.drop(columns=['Recovery_Time','Patient_ID','Gender_Male','Smoking_Status_Yes'],axis=1)
y=df['Recovery_Time']

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

#linear regression
from sklearn.linear_model import LinearRegression
reg = LinearRegression()
reg.fit(x_train, y_train)
y_pred = reg.predict(x_test)

#compute the rense, r2 score
from sklearn.metrics import mean_squared_error,r2_score
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)
print("RMSE:", rmse)
print("R2 Score:", r2)

pd.DataFrame(x.columns,reg.coef_)

x_test_sample = x_test.iloc[0,:]
x_test_sample_reshaped = np.array(x_test_sample).reshape(1, -1)

y_pred_sample = reg.predict(x_test_sample_reshaped)

y_pred_sample

import joblib
joblib.dump(reg,'linear_regression_node1.pkl')

!pip install streamlit pyngrok

streamlit_code = """
import streamlit as st
import joblib
import numpy as np
import json

# Load the trained model
model = joblib.load('linear_regression_node1.pkl')

# Streamlit app
st.title("Recovery Time Prediction")
st.write("Enter the input values for prediction.")

# Input fields for each feature
Age = st.number_input("Age", min_value=18, max_value=100, step=1, value=30)
length_of_surgery = st.number_input("Length of Surgery (minutes)", min_value=30, max_value=240, step=1, value=60)
BMI = st.number_input("BMI", min_value=15.0, max_value=50.0, step=0.1, value=25.0)
blood_pressure_systolic = st.number_input("Blood Pressure Systolic", min_value=90, max_value=180, step=1, value=120)
blood_pressure_diastolic = st.number_input("Blood Pressure Diastolic", min_value=60, max_value=120, step=1, value=80)
hemoglobin_level = st.number_input("Hemoglobin Level (g/dL)", min_value=8.0, max_value=18.0, step=0.1, value=14.0)

# Categorical features (One-hot encoding)
Gender = st.selectbox("Gender", options=["Male", "Female"])
type_of_surgery = st.selectbox("Type_of_Surgery", options=["Cardiac", "Gastrointestinal", "Neurological", "Orthopedic", "Urologic"])
smoking_status = st.selectbox("Smoking Status", options=["Yes", "No"])

# One-hot encoding logic
gender_encoded = 1 if Gender == "Female" else 0  # Female = 1, Male = 0

# Encoding surgery types (One-hot)
type_of_surgery_options = ["Cardiac", "Gastrointestinal", "Neurological", "Orthopedic", "Urologic"]
type_of_surgery_encoded = [1 if type_of_surgery == option else 0 for option in type_of_surgery_options]

# Encoding smoking status (One-hot)
smoking_status_encoded = 1 if smoking_status == "No" else 0  # No = 1, Yes = 0

# Normalization function
def min_max_scale(value, min_val, max_val):
    return (value - min_val) / (max_val - min_val)

# Load min-max values from JSON
with open('min_max_values.json', 'r') as json_file:
    min_max_values = json.load(json_file)

# Normalize inputs
Age_norm = min_max_scale(Age, *min_max_values['Age'])
BMI_norm = min_max_scale(BMI, *min_max_values['BMI'])
Length_of_Surgery_norm = min_max_scale(length_of_surgery, *min_max_values['Length_of_Surgery'])
Blood_Pressure_Systolic_norm = min_max_scale(blood_pressure_systolic, *min_max_values['Blood_Pressure_Systolic'])
Blood_Pressure_Diastolic_norm = min_max_scale(blood_pressure_diastolic, *min_max_values['Blood_Pressure_Diastolic'])
Hemoglobin_Level_norm = min_max_scale(hemoglobin_level, *min_max_values['Hemoglobin_Level'])

# Prepare input data for prediction (Ensure it matches the training feature order)
input_data = np.array([
    Age_norm,
    Length_of_Surgery_norm,
    BMI_norm,
    Blood_Pressure_Systolic_norm,
    Blood_Pressure_Diastolic_norm,
    Hemoglobin_Level_norm,
    gender_encoded
] + type_of_surgery_encoded + [smoking_status_encoded]).reshape(1, -1)

# Debugging Step: Print feature count
st.write(f"Feature count: {input_data.shape[1]}")  # This should print *13*

# Predict button
if st.button("Predict Recovery Time"):
    if input_data.shape[1] == 13:  # Ensure input has correct features
        prediction = model.predict(input_data)
        st.success(f"Predicted recovery time: {prediction[0]:.2f} days")
    else:
        st.error(f"Feature mismatch: Expected 13, but got {input_data.shape[1]}")
    """
#save the code to a file
with open('app.py','w')as f:
  f.write(streamlit_code)

!streamlit run app.py &>/content/logs.txt &

from pyngrok import ngrok
ngrok.set_auth_token("2tqLkAmewm6lJ8FR1w7QDzyLPYF_5ym1o2fHCn9tP6a2ibLQT")

from pyngrok import ngrok

public_url = ngrok.connect(8501)
print(f"Streamlit App is live at: {public_url}")

!pkill -f ngrok