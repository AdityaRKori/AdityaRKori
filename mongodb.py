# -*- coding: utf-8 -*-
"""MongoDB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W8t1xFIy5KuZRtUfpzVjaQ3yAX2d3k4s
"""

!pip install pymongo

from pymongo.mongo_client import MongoClient

uri = "ur key"

try:
  client = MongoClient(uri)
  print("connected")

except pymongo.errors.ConfigurationError:
    print("An Invalid URI host error was received")

print(client.list_database_names())

import pymongo

mydb = client["mydatabase1"]

mycol = mydb["customers1"]

mydict = {"name": "Joe", "address": "India"}

x = mycol.insert_one(mydict)

print(x.inserted_id)

mylist = [
    {"name": "Amy", "address": "Apple st 652"},
    {"name": "Hannah", "address": "Mountain 21"},
    {"name": "Michael", "address": "Valley 23"}
]
x = mycol.insert_many(mylist) # Remove the extra indentation from this line.

mylist = [
    {"name": "Amy", "Age": 15},
    {"name": "Hannah", "address": "Mountain 21"},
    {"name": "Michael", "weight": 10}]

y = mycol.insert_many(mylist) # Remove the extra indentation from this line, changed mylist1 to mylist.

x = mycol.find_one()

print(x)

myresult = mycol.find().limit(5)
for i in myresult:
  print(i)

myquery = {"address": "Highway 37"}

mydoc = mycol.find(myquery)
for x in mydoc:
  print(x)

myquery = {"age": {"$gt": 50}}

mydoc = mycol.find(myquery)
for x in mydoc:
  print(x)

filters = { "$and":[ {"name": "Amy"}, {"age": 12} ]}
print(list ( mycol.find(filters )))
print(mycol.count_documents({'age' : {'$in': [11,95]}}))

mydoc = mycol.find().sort("name")

for i in mydoc:
  print(i)

mydoc = mycol.delete_one(myquery)

myquery = {"address": {"$regex": "^S"}}

x = mycol.delete_many(myquery)

print(x.deleted_count, " documents deleted.")

myqueries = {"address": "India"}
newvalues = {"$set": {"address": "India 123"}}

mycol.update_one(myqueries, newvalues)

for i in mycol.find():
  print(i)

myquery = {"address": {"$regex": "^I"}}
newvalues = {"$set": {"name": "Minie"}}

x = mycol.update_many(myquery, newvalues)

print(x.modified_count, "documents updated.")

for i in mycol.find():
  print(i)

import base64
def encode_file(file_path):
    with open(file_path, "rb") as data_file:
        return base64.b64encode(data_file.read()).decode('utf-8')

# Ensure encode_file is a function before calling it.
import base64

def encode_file(file_path):
    with open(file_path, "rb") as data_file:
        return base64.b64encode(data_file.read()).decode('utf-8')

# This is where the function is called, assuming it's still a function.
encoded_file = encode_file('/content/prescription_template.png')

file_document = {
    "file_name":"prescription_template.pmg",
    "type":'image',
    "file_data":encoded_file
}
# insert the document into collection
mycol.insert_one(file_document)

query = {"type": 'image'}
img_document = mycol.find_one(query)

image_data = base64.b64decode(img_document['file_data'])

with open('/content/output.png', 'wb') as image_file:
    image_file.write(image_data)

# prompt: display image

from IPython.display import Image
Image('/content/output.png')

# Ensure encode_file is a function before calling it.
import base64

def encode_file(file_path):
    with open(file_path, "rb") as data_file:
        return base64.b64encode(data_file.read()).decode('utf-8')

# This is where the function is called, assuming it's still a function.
encoded_file = encode_file('/content/sample-3s.mp3')

file_document = {
    "file_name":"sample-3s.mp3",
    "type":'audio',
    "file_data":encoded_file
}
# insert the document into collection
mycol.insert_one(file_document)

query = {"type": 'audio'}
aud_document = mycol.find_one(query)

audio_data = base64.b64decode(aud_document['file_data'])

with open('/content/output.mp3', 'wb') as audio_file:
    audio_file.write(audio_data)

# prompt: display audio

from IPython.display import Audio

Audio('/content/output.mp3')

# Ensure encode_file is a function before calling it.
import base64

def encode_file(file_path):
    with open(file_path, "rb") as data_file:
        return base64.b64encode(data_file.read()).decode('utf-8')

# This is where the function is called, assuming it's still a function.
encoded_file = encode_file('/content/file_example_MP4_480_1_5MG.mp4')

file_document = {
    "file_name":"example.mp4",
    "type":'video',
    "file_data":encoded_file
}
# insert the document into collection
mycol.insert_one(file_document)

query = {"type": 'video'}
vid_document = mycol.find_one(query)

video_data = base64.b64decode(vid_document['file_data'])

with open('/content/output.mp4', 'wb') as video_file:
    video_file.write(video_data)

from IPython.display import Video

Video('/content/output.mp4')

from IPython.display import HTML
from base64 import b64encode

# Open the MP4 file using the correct path
mp4 = open('/content/file_example_MP4_480_1_5MG.mp4','rb').read()

# Encode the MP4 data to base64
data_url = "data:video/mp4;base64," + b64encode(mp4).decode()

# Embed the video in HTML
HTML("""
<video width=400 controls>
from IPython.display import HTML
from base64 import b64encode

# Open the MP4 file using the correct path
mp4 = open('/content/file_example_MP4_480_1_5MG.mp4','rb').read()

# Encode the MP4 data to base64
data_url = "data:video/mp4;base64," + b64encode(mp4).decode()

# Embed the video in HTML
HTML("""
<video width=400 controls>
      <source src="%s" type="video/mp4">
</video>
""" % data_url)
